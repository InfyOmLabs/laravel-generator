<?php namespace $NAMESPACE_REPOSITORIES_TESTS$;

use $NAMESPACE_MODEL$\$MODEL_NAME$;
use $NAMESPACE_REPOSITORY$\$MODEL_NAME$Repository;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use $NAMESPACE_TESTS$\TestCase;
use $NAMESPACE_TESTS$\ApiTestTrait;
use $NAMESPACE_TESTS$\ModelTestTrait;

class $MODEL_NAME$RepositoryTest extends TestCase
{
    use ApiTestTrait;
    use DatabaseTransactions;
    use ModelTestTrait;

    const MODEL_MAIN_PROPERTY_KEY = 'name';
    /**
     * @var $MODEL_NAME$Repository
     */
    protected $$MODEL_NAME_CAMEL$Repo;

    public function setUp() : void
    {
        parent::setUp();
        $this->$MODEL_NAME_CAMEL$Repo = \App::make($MODEL_NAME$Repository::class);
    }

    /**
     * @group $MODEL_NAME$
     */
    public function test_create_$MODEL_NAME_SNAKE$()
    {
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::factory()->make()->toArray();

        $created$MODEL_NAME$ = $this->$MODEL_NAME_CAMEL$Repo->create($$MODEL_NAME_CAMEL$);

        $created$MODEL_NAME$ = $created$MODEL_NAME$->toArray();
        $this->assertArrayHasKey($this->getModelPrimaryKey(), $created$MODEL_NAME$);
        $this->assertNotNull(
            $created$MODEL_NAME$[$this->getModelPrimaryKey()], 
            'Created $MODEL_NAME$ must have id specified'
        );
        $this->assertDatabaseHas($this->getModelTable(), [
            $this->getModelPrimaryKey() => $created$MODEL_NAME$[$this->getModelPrimaryKey()]
        ]);
        $this->assertModelData($$MODEL_NAME_CAMEL$, $created$MODEL_NAME$);
    }

    /**
     * @group $MODEL_NAME$
     */
    public function test_read_$MODEL_NAME_SNAKE$()
    {
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::factory()->create();

        $db$MODEL_NAME$ = $this->$MODEL_NAME_CAMEL$Repo->find($$MODEL_NAME_CAMEL$->{$this->getModelPrimaryKey()});

        $db$MODEL_NAME$ = $db$MODEL_NAME$->toArray();
        $this->assertModelData($$MODEL_NAME_CAMEL$->toArray(), $db$MODEL_NAME$);
    }

    /**
     * @group $MODEL_NAME$
     */
    public function test_update_$MODEL_NAME_SNAKE$()
    {
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::factory()->create();
        $updatedData = $MODEL_NAME$::factory()->make()->toArray();

        $updated$MODEL_NAME$ = $this->$MODEL_NAME_CAMEL$Repo->update(
            $updatedData, 
            $$MODEL_NAME_CAMEL$->{$this->getModelPrimaryKey()}
        );

        $this->assertModelData($updatedData, $updated$MODEL_NAME$->toArray());
        
        $db$MODEL_NAME$ = $this->$MODEL_NAME_CAMEL$Repo->find($$MODEL_NAME_CAMEL$->{$this->getModelPrimaryKey()});
        $this->assertModelData($updatedData, $db$MODEL_NAME$->toArray());
    }

    /**
     * @group $MODEL_NAME$
     */
    public function test_delete_$MODEL_NAME_SNAKE$()
    {
        $$MODEL_NAME_CAMEL$ = $MODEL_NAME$::factory()->create();

        $resp = $this->$MODEL_NAME_CAMEL$Repo->delete($$MODEL_NAME_CAMEL$->{$this->getModelPrimaryKey()});

        $this->assertTrue($resp);

        $this->assertSoftDeleted($this->getModelTable(), [
            $this->getModelPrimaryKey() => $$MODEL_NAME_CAMEL$->{$this->getModelPrimaryKey()}
            $this->getModelMainPropertyKey() => $$MODEL_NAME_CAMEL$->{$this->getModelMainPropertyKey()}
        ]);
    }

    protected function getModelMainPropertyKey()
    {
        return self::MODEL_MAIN_PROPERTY_KEY;
    }
}