<?php

namespace $NAMESPACE_API_CONTROLLER$;

use $NAMESPACE_API_REQUEST$\Create$MODEL_NAME$APIRequest;
use $NAMESPACE_API_REQUEST$\Update$MODEL_NAME$APIRequest;
use $NAMESPACE_MODEL$\$MODEL_NAME$;
use $NAMESPACE_REPOSITORY$\$MODEL_NAME$Repository;
use Illuminate\Http\Request;
use $NAMESPACE_APP$\Http\Controllers\AppBaseController;
use InfyOm\Generator\Criteria\LimitOffsetCriteria;
use Prettus\Repository\Criteria\RequestCriteria;

$DOC_CONTROLLER$
class $MODEL_NAME$APIController extends AppBaseController
{
    /**
     * @var  $MODEL_NAME$Repository
     */
    private $$MODEL_NAME_CAMEL$Repository;

    /**
     * $MODEL_NAME$Controller constructor.
     *
     * @param $MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repository
     */
    public function __construct($MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repository)
    {
        $this->$MODEL_NAME_CAMEL$Repository = $$MODEL_NAME_CAMEL$Repository;
    }

    /**
     * Display a listing of the $MODEL_NAME$.
     *
     * @param Request $request
     * @return mixed
     */
    public function index(Request $request)
    {
        $this->$MODEL_NAME_CAMEL$Repository->pushCriteria(new RequestCriteria($request));
        $this->$MODEL_NAME_CAMEL$Repository->pushCriteria(new LimitOffsetCriteria($request));
        $models = $this->$MODEL_NAME_CAMEL$Repository->all();

        return $this->sendResponse($models->toArray(), '$MODEL_NAME_PLURAL_HUMAN$ retrieved successfully');
    }

    /**
     * Store a newly created $MODEL_NAME$ in storage.
     *
     * @param Create$MODEL_NAME$APIRequest $request
     *
     * @return mixed
     */
    public function store(Create$MODEL_NAME$APIRequest $request)
    {
        $model = $this->$MODEL_NAME_CAMEL$Repository->create($request->all());

        return $this->sendResponse($model->toArray(), '$MODEL_NAME_HUMAN$ saved successfully');
    }

    /**
     * Display the specified $MODEL_NAME$.
     *
     * @param int $id
     *
     * @return mixed
     */
    public function show($id)
    {
        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $model = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);
        if (empty($model)) {
            return $this->sendError('$MODEL_NAME_HUMAN$ not found');
        }

        return $this->sendResponse($model->toArray(), '$MODEL_NAME_HUMAN$ retrieved successfully');
    }

    /**
     * Update the specified $MODEL_NAME$ in storage.
     *
     * @param int $id
     * @param Update$MODEL_NAME$APIRequest $request
     *
     * @return mixed
     */
    public function update($id, Update$MODEL_NAME$APIRequest $request)
    {
        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $model = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);
        if (empty($model)) {
            return $this->sendError('$MODEL_NAME_HUMAN$ not found');
        }
        $model = $this->$MODEL_NAME_CAMEL$Repository->update($request->all(), $id);

        return $this->sendResponse($model->toArray(), '$MODEL_NAME$ updated successfully');
    }

    /**
     * Remove the specified $MODEL_NAME$ from storage.
     *
     * @param int $id
     *
     * @return mixed
     */
    public function destroy($id)
    {
        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $model = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);
        if (empty($model)) {
            return $this->sendError('$MODEL_NAME_HUMAN$ not found');
        }
        $model->delete();

        return $this->sendResponse($id, '$MODEL_NAME_HUMAN$ deleted successfully');
    }
}
