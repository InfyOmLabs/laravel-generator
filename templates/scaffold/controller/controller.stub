<?php

namespace $NAMESPACE_CONTROLLER$;

use $NAMESPACE_REQUEST$\Create$MODEL_NAME$Request;
use $NAMESPACE_REQUEST$\Update$MODEL_NAME$Request;
use $NAMESPACE_REPOSITORY$\$MODEL_NAME$Repository;
use $NAMESPACE_APP$\Http\Controllers\AppBaseController;
use $NAMESPACE_MODEL$\$MODEL_NAME$;
use Illuminate\Http\Request;
use Flash;
use Prettus\Repository\Criteria\RequestCriteria;

class $MODEL_NAME$Controller extends AppBaseController
{
    /**
     * @var $MODEL_NAME$Repository
     */
    private $$MODEL_NAME_CAMEL$Repository;

    /**
     * $MODEL_NAME$Controller constructor.
     *
     * @param $MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repository
     */
    public function __construct($MODEL_NAME$Repository $$MODEL_NAME_CAMEL$Repository)
    {
        $this->$MODEL_NAME_CAMEL$Repository = $$MODEL_NAME_CAMEL$Repository;
    }

    /**
     * Display a listing of the $MODEL_NAME$.
     *
     * @param Request $request
     *
     * @return mixed
     */
    public function index(Request $request)
    {
        $this->$MODEL_NAME_CAMEL$Repository->pushCriteria(new RequestCriteria($request));
        $models = $this->$MODEL_NAME_CAMEL$Repository->$RENDER_TYPE$;

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.index', ['models' => $models]);
    }

    /**
     * Show the form for creating a new $MODEL_NAME$.
     *
     * @return mixed
     */
    public function create()
    {
        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.create', ['model' => new $MODEL_NAME$()]);
    }

    /**
     * Store a newly created $MODEL_NAME$ in storage.
     *
     * @param Create$MODEL_NAME$Request $request
     *
     * @return mixed
     */
    public function store(Create$MODEL_NAME$Request $request)
    {
        $model = $this->$MODEL_NAME_CAMEL$Repository->create($request->all());
        Flash::success('$MODEL_NAME_HUMAN$ saved successfully.');

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }

    /**
     * Display the specified $MODEL_NAME$.
     *
     * @param int $id
     *
     * @return mixed
     */
    public function show($id)
    {
        $model = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);
        if (empty($model)) {
            Flash::error('$MODEL_NAME_HUMAN$ not found');

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.show', ['model' => $model]);
    }

    /**
     * Show the form for editing the specified $MODEL_NAME$.
     *
     * @param int $id
     *
     * @return mixed
     */
    public function edit($id)
    {
        $model = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);
        if (empty($model)) {
            Flash::error('$MODEL_NAME_HUMAN$ not found');

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.edit', ['model' => $model]);
    }

    /**
     * Update the specified $MODEL_NAME$ in storage.
     *
     * @param int $id
     * @param Update$MODEL_NAME$Request $request
     *
     * @return mixed
     */
    public function update($id, Update$MODEL_NAME$Request $request)
    {
        $model = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);
        if (empty($model)) {
            Flash::error('$MODEL_NAME_HUMAN$ not found');

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }
        $model = $this->$MODEL_NAME_CAMEL$Repository->update($request->all(), $id);
        Flash::success('$MODEL_NAME_HUMAN$ updated successfully.');

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }

    /**
     * Remove the specified $MODEL_NAME$ from storage.
     *
     * @param int $id
     *
     * @return mixed
     */
    public function destroy($id)
    {
        $model = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);
        if (empty($model)) {
            Flash::error('$MODEL_NAME_HUMAN$ not found');

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }
        $this->$MODEL_NAME_CAMEL$Repository->delete($id);
        Flash::success('$MODEL_NAME_HUMAN$ deleted successfully.');

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }
}
