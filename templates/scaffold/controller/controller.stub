<?php

namespace $NAMESPACE_CONTROLLER$;

use $NAMESPACE_REQUEST$\Create$MODEL_NAME$$REQUESTNAMESUFFIX$;
use $NAMESPACE_REQUEST$\Update$MODEL_NAME$$REQUESTNAMESUFFIX$;
use $NAMESPACE_REPOSITORY$\$MODEL_NAME$$REPOSITORYSUFFIX$;
use $NAMESPACE_APP$\Http\Controllers\AppBaseController;
use Illuminate\Http\Request;
use Flash;
use Prettus\Repository\Criteria\RequestCriteria;
use Response;

class $MODEL_NAME$$CONTROLLERNAMESUFFIX$ extends AppBaseController
{
    /** @var  $MODEL_NAME$$REPOSITORYSUFFIX$ */
    private $$MODEL_NAME_CAMEL$$REPOSITORYSUFFIX$;

    public function __construct($MODEL_NAME$$REPOSITORYSUFFIX$ $$MODEL_NAME_CAMEL$$REPOSITORYSUFFIX$)
    {
        $this->$MODEL_NAME_CAMEL$$REPOSITORYSUFFIX$ = $$MODEL_NAME_CAMEL$$REPOSITORYSUFFIX$;
    }

    /**
     * Display a listing of the $MODEL_NAME$.
     *
     * @param Request $request
     * @return Response
     */
    public function index(Request $request)
    {
        $this->$MODEL_NAME_CAMEL$REPOSITORYSUFFIX$->pushCriteria(new RequestCriteria($request));
        $$MODEL_NAME_PLURAL_CAMEL$ = $this->$MODEL_NAME_CAMEL$REPOSITORYSUFFIX$->$RENDER_TYPE$;

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.index')
            ->with('$MODEL_NAME_PLURAL_CAMEL$', $$MODEL_NAME_PLURAL_CAMEL$);
    }

    /**
     * Show the form for creating a new $MODEL_NAME$.
     *
     * @return Response
     */
    public function create()
    {
        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.create');
    }

    /**
     * Store a newly created $MODEL_NAME$ in storage.
     *
     * @param Create$MODEL_NAME$$REPOSITORYSUFFIX$ $request
     *
     * @return Response
     */
    public function store(Create$MODEL_NAME$$REPOSITORYSUFFIX$ $request)
    {
        $input = $request->all();

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$REPOSITORYSUFFIX$->create($input);

        Flash::success('$MODEL_NAME_HUMAN$ saved successfully.');

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }

    /**
     * Display the specified $MODEL_NAME$.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function show($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$REPOSITORYSUFFIX$->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            Flash::error('$MODEL_NAME_HUMAN$ not found');

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.show')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
    }

    /**
     * Show the form for editing the specified $MODEL_NAME$.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function edit($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$REPOSITORYSUFFIX$->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            Flash::error('$MODEL_NAME_HUMAN$ not found');

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_SNAKE$.edit')->with('$MODEL_NAME_CAMEL$', $$MODEL_NAME_CAMEL$);
    }

    /**
     * Update the specified $MODEL_NAME$ in storage.
     *
     * @param  int              $id
     * @param Update$MODEL_NAME$$REPOSITORYSUFFIX$ $request
     *
     * @return Response
     */
    public function update($id, Update$MODEL_NAME$$REPOSITORYSUFFIX$ $request)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$REPOSITORYSUFFIX$->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            Flash::error('$MODEL_NAME_HUMAN$ not found');

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$REPOSITORYSUFFIX$->update($request->all(), $id);

        Flash::success('$MODEL_NAME_HUMAN$ updated successfully.');

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }

    /**
     * Remove the specified $MODEL_NAME$ from storage.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function destroy($id)
    {
        $$MODEL_NAME_CAMEL$ = $this->$MODEL_NAME_CAMEL$REPOSITORYSUFFIX$->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            Flash::error('$MODEL_NAME_HUMAN$ not found');

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
        }

        $this->$MODEL_NAME_CAMEL$REPOSITORYSUFFIX$->delete($id);

        Flash::success('$MODEL_NAME_HUMAN$ deleted successfully.');

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_CAMEL$.index'));
    }
}
